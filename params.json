{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Git 사용자를 위한 커뮤니티 가이드. git에 관한 정보가 일목 요연하게 정리한 페이지가 필요해서 정리했다. 이 프로젝트 이름은 `두깃`이다. `도그잇`으로 읽지 않는다.\r\n\r\n한글로 번역된 자료가 있으면 영문 링크는 생략하고 한글 링크만 달았다.\r\n\r\n## CLI\r\n\r\nCLI 사용시 유용한 자료.\r\n\r\n### dotfile\r\n\r\n무려 [github][]에서 관리하고 있는 프로젝트로 [dotfiles][]에 가면 자세한 설명이 나와 있다. git뿐만 아니라 다양한 앱에서 사용하는 dotfile이 정리돼 있다.\r\n\r\n### bash-it\r\n\r\n[bash-it][]은 bash 환경에서 유용한 프레임워크다. git, git-flow 명령어 자동완성, 프롬프트 테마 등 bash환경에서 필요하는 스크립트들이 모두 들어 있다. 다음은 bash-it의 zork 테마를 적용한 프롬프트 화면이다:\r\n\r\n프로젝트를 포크해서 github에 올려놓으면 여러 서버에서 같은 환경으로 작업할 수 있다. bash-it을 포크해두고 linux, mac 환경에서 동일한 bash 프롬프트와 개발환경을 설정해 사용할 수 있다. bash-it은 확장하기 쉬운 구조로 돼있기 때문에 나에게 필요한 bash 스크립트를 github 저장소에 등록해두고 사용하기도 좋다.\r\n\r\n### oh-my-zsh\r\n\r\n[bash-it][]과 마찬가지로 zsh에서 유용한 프레임워크다. [bash-it][]은 이 [oh-my-zsh][]을 보고 따라 만든 것이다. [bash-it][]과 마찬가지로 git, git-flow 명령어 자동완성, 프롬프트 테마 등 zsh 환경에서 필요한 것이 들어 있을 것이다.\r\n\r\n### msysgit\r\n\r\nWindow 사용자라면 [msysgit][]을 사용하고 있을 텐데 [@gypark][]님의 [Git](http://gypark.pe.kr/wiki/Git)을 반드시 읽어봐야 한다. msysgit 사용자가 고생하는 한글 문제, 멍청한 cmd 터미널 문제등을 고민하고 실험하고 정리하였다. 그리고 그 것을 공유해 주었다. 그외 difftool 설정하고 고르는 방법등 msysgit을 사용하려면 이 글이 꼭 필요하다.\r\n\r\n### hg-git\r\n\r\nhttp://hg-git.github.com/ - mercurial to git bridge\r\n\r\n### git alias\r\n\r\n`git alias` 명령으로 간단한 단축 명령을 만들 수 있다. 다음과 같이 등록해서 쓰면 편리하다:\r\n\r\n```bash\r\ngit config --global alias.st status\r\ngit config --global alias.co checkout\r\ngit config --global alias.ci commit\r\ngit config --global alias.br branch\r\ngit config --global alias.unstage 'reset HEAD --'\r\ngit config --global alias.cs \"commit -s\"\r\n```\r\n\r\n### git log\r\n\r\n다음과 같이 등록하면 커밋 로그 하나가 한줄로 나온다:\r\n\r\n```bash\r\ngit config --global alias.lg \"log --name-status --color --abbrev-commit --date=relative --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\"\r\n```\r\n\r\n`git lg`라고 실행하면 다음과 같이 나타난다:\r\n\r\n![alias.lg]()\r\n\r\n보면 알겠지만 매우 보기 편하다. 커밋하나가 한줄로 나올뿐만 아니라 각 브랜치가 가리키는 커밋도 함께 표시된다.\r\n\r\n가끔식은 브랜치 관계를 식별하는 뷰가 필요하다. 그럴때 사용하면 유용한 alias도 하나 등록하자:\r\n\r\n```bash\r\ngit config --global alias.tree \"log --graph --decorate --pretty=oneline --abbrev-commit --all\"\r\n```\r\n\r\n실행하면 다음과 같이 보여준다:\r\n\r\n![alias.tree]()\r\n\r\n`lg`와 `tree`로도 읽을 수 없는 히스토리라면 gitx같은 GUI 도구를 사용해야 한다.\r\n\r\n### git mergetool, git difftool\r\n\r\n* [본격 diff 툴 비교 리뷰 - Beyond Compare의 승!](http://ljh131.tistory.com/143)\r\n* [Git: mergetool, difftool](http://dogfeet.github.com/articles/2011/git-mergediff.html) - `git mergetool`, `git difftool` 사용법\r\n\r\n## GUI\r\n\r\n유용한 GUI 도구들\r\n\r\n* [git-scm.com의 GUI clients](http://git-scm.com/downloads/guis)\r\n* [egit](http://www.eclipse.org/egit/) - for eclipse\r\n* [github:mobile](http://mobile.github.com/) - for iphone, android\r\n\r\n## 기타 프로젝트\r\n\r\n### gitignore\r\n\r\n이 [gitignore](https://github.com/github/gitignore) 프로젝트는 `.gitignore` 파일에 대한 템플릿 프로젝트다. 무려 [@github][]에서 관리하고 있고 로컬에 Clone해두면 매우 편리하다. 각 OS, 에디터, 개발도구, 언어에 따라서 다양한 `.gitignore` 파일 템플릿이 담겨 있다.\r\n\r\n자세한 것은 [gitignore 방법에 대한 글](http://dogfeet.github.com/articles/2012/git-global-ignore.html)을 살펴보기 바란다.\r\n\r\n### git-tle\r\n\r\n[git-tles](https://github.com/dogfeet/git-tles)는 [@pismute][]님이 만들어서 사용하고 있는 프로젝트 간단한 스크립트로 해당 저장소에 대해서 `git pull`과 `git fetch` 명령을 한방에 수행해주는 [`git ff`](http://dogfeet.github.com/articles/2012/git-ff.html) 명령과 브랜치 정보를 요약해서 보여주는 [`git todo`](http://dogfeet.github.com/articles/2012/git-todo.html) 명령이 들어 있다.\r\n\r\n[`git ff`](http://dogfeet.github.com/articles/2012/git-ff.html)는 간단히 fetch할 때 Fast-forward될 수 있는 브랜치는 그냥 자동으로 Merge됐으면 해서 만든 툴이다. Merge나 Rebase가 필요하면 수동으로 할 수 있도록 알려준다.\r\n\r\n[`git todo`](http://dogfeet.github.com/articles/2012/git-todo.html)는 브랜치 정보를 요약해주는 툴로 로컬 브랜치 원격브랜치를 나눠서 볼 수 있다.\r\n\r\n### git-extras\r\n\r\n[git-extras](https://github.com/visionmedia/git-extras)는 [@visionmedia][]님의 git 확장 프로젝트다. 구현돼 있는게 굉장히 많고 가끔식 필요한 명령어가 들어 있다. 어떤 것이 있는지 한번은 살펴보길 바란다.\r\n\r\n## 읽을 거리\r\n\r\nGit과 관련된 읽을 거리를 모았다.\r\n\r\n### 책, 가이드, conf\r\n\r\n* [git-scm](http://git-scm.com/) - git 홈페이지\r\n* [progit][] - 필독서.\r\n* [A Visual Git Reference](http://marklodato.github.com/visual-git-guide/index-ko.html) - git의 핵심 용어를 이해하는데 매우 유용함.\r\n* [Git In The Trenches](http://cbx33.github.com/gitt/) - git을 가르치는 사람을 위해 만들어진 문서.\r\n* [Git - 간편가이드](http://rogerdudler.github.com/git-guide/index.ko.html)\r\n* [Egit User Guide](http://wiki.eclipse.org/EGit/User_Guide)\r\n* [eclipseConf의 Git 자료](http://wiki.eclipse.org/EGit/Training) - eclipse에서 git을 사용하는데 매우 유익함.\r\n* [@chacon][]님의 [Getting Git](http://www.slideshare.net/chacon/getting-git)\r\n* [@chacon][]님의 [Git 101](http://www.slideshare.net/chacon/git-101-presentation)\r\n\r\n### 브랜치 사용법(Workflow)\r\n\r\ngit은 브랜치 사용법이 매우 중요하므로 브랜치 사용법과 관련된 자료를 따로 모았다.\r\n\r\n* [Git: branch-a-v](http://dogfeet.github.com/articles/2012/git-branch-a-v.html) - `git branch -a -v` 명령을 설명함\r\n* [Git: Remote Tracking Branch vs Tracking Branch](http://dogfeet.github.com/articles/2012/git-tracking-vs-remote-tracking.html) - Remote Tracking Branch와 Tracking Branch가 무엇이 다른지 설명함 \r\n* [git-flow](http://dogfeet.github.com/articles/2011/git-flow.html) - [@nvie][]님이 정리한 Workflow. 배포가 개념이 있는 패키지를 개발할 때 참고 하면 좋다.\r\n* [github-flow](http://dogfeet.github.com/articles/2011/github-flow.html) - github에서 사용하는 Workflow. 배포가 없는 웹을 개발할 때 참고하면 좋다.\r\n* [Git: 번역 Workflow](http://dogfeet.github.com/articles/2012/git-translate-flow.html) - progit을 번역할 때 사용한 Workflow.\r\n* [Git: Rebase는 언제 어떻게 해야 할까?](http://dogfeet.github.com/articles/2012/git-merge-rebase.html) - Rebase는 언제 어떻게 해야하는지 정리\r\n* [Git: merge](http://dogfeet.github.com/articles/2011/git-merge.html) - Merge하는 방법을 정리\r\n\r\n### 나머지 git 사용법\r\n\r\n* [Git: 델타와 스냅샷](http://dogfeet.github.com/articles/2012/git-delta.html) - 델타와 스냅샷을 관점을 git을 설명함.\r\n* [Git: git-svn](http://dogfeet.github.com/articles/2012/git-svn.html) - SVN 서버, Git 클라이언트로 사용하는 방법을 정리\r\n* [GitHub로 남의 프로젝트에 감놓고 배놓기](http://dogfeet.github.com/articles/2012/how-to-github.html) - Github 사용법\r\n* [Git: conflict](http://dogfeet.github.com/articles/2012/git-conflict.html) - Confict가 났을 때 필요한 명령어를 정리\r\n* [Git: diff](http://dogfeet.github.com/articles/2011/git-diff.html) - diff 명령어 사용법을 정리\r\n* [Git: refs](http://dogfeet.github.com/articles/2011/git-merge.html) - git의 Refs를 정리. progit 6장에 나오은 refs를 정리한 것임\r\n* [diff::Unified format](http://dogfeet.github.com/articles/2011/1316924580.html) - git이 사용하는 diff 포멧인 unified 포멧을 정리함. \r\n\r\n### 뒷 이야기\r\n\r\n* [새로운 시장을 창조한 스타트업 GitHub의 비하인드 스토리](http://allaboutetp.wordpress.com/2012/03/18/github/)\r\n* [Git에 대한 Linus Torvalds의 연설](http://www.youtube.com/watch?v=4XpnKHJAok8)\r\n* [@holman][]님의 [How GitHub Works](http://zachholman.com/posts/how-github-works/)\r\n* [@holman][]님의 [How GitHub Uses GitHub to Build GitHub](http://zachholman.com/talk/how-github-uses-github-to-build-github)\r\n\r\n[progit]: http://dogfeet.github.com/articles/2012/progit.html\r\n[dotfiles]: http://dotfiles.github.com\r\n[github]: https://github.com/\r\n[bash-it]: https://github.com/revans/bash-it\r\n[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\r\n[msysgit]: http://code.google.com/p/msysgit/\r\n\r\n[@gypark]: https://twitter.com/gypark\r\n[@github]: https://twitter.com/github\r\n[@pismute]: https://twitter.com/pismute\r\n[@visionmedia]: https://twitter.com/visionmedia\r\n[@nvie]: https://twitter.com/nvie\r\n[@holman]: https://twitter.com/holman\r\n[@chacon]: https://twitter.com/chacon\r\n\r\n## 참여\r\n\r\n추가할 내용이 있으면 Pull Request를 보내주세요.\r\n\r\n<div id=\"disqus_thread\" class=\"well span10 offset1\"></div>\r\n\r\n<script type=\"text/javascript\">\r\n    var disqus_shortname = 'dogfeet-github';\r\n    var disqus_identifier = '/articles/2012/meteor-meteorite.html';\r\n    (function() {\r\n        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\r\n        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\r\n        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\r\n    })();\r\n</script>\r\n","name":"Dogit","tagline":"git 자료 정리소, do-git","google":"UA-27493298-1"}